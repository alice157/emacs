#title DotEmacs
#+author Alice Burns
#+PROPERTY: header-args :tangle yes

* Attribution

Draws heavily (and outright copies in some places) from [[https://raw.githubusercontent.com/angrybacon/dotemacs/master/dotemacs.org][this]] dotemacs.

* Bootstrap
  
** Use Better Defaults

Bells are annoying
#+begin_src emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'ignore)
#+end_src
Lockfiles don't seem to work well - tragic.
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src


Use eldoc mode
#+begin_src emacs-lisp
  (global-eldoc-mode 1)
#+end_src

Remove mouse-centric UI elements.

#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0))
#+END_SRC

Set some variables

#+BEGIN_SRC emacs-lisp
(setq-default
  auto-window-vscroll nil              ; Lighten vertical scroll
  fill-column 80                      ; Width for auto line breaks
  indent-tabs-mode nil                ; Don't use tabs to indent
  tab-width 2                         ; Tab = 4 spaces
  select-enable-clipboard t           ; Use the system clipboard
  ;initial-major-mode 'org-mode
  inhibit-startup-screen t)
#+END_SRC
Do some stuff

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-subword-mode 1)
(electric-indent-mode)
#+END_SRC

Fullscreen

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

Add ~bin to exec-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path (expand-file-name "~/bin"))
#+END_SRC
** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. Ic
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Load =.secret.el=

I load =~/.emacs.d/.secret.el= to keep sensible things out of version control.
For instance, you could set your identity by customizing both =user-full-name=
and =user-mail-address=. This is also where you want your API tokens to live.

#+BEGIN_SRC emacs-lisp
(defvar me/erc-nick               nil        "The ERC nick to use.")
(defvar me/erc-password           nil        "The ERC password to use.")
(defvar me/erc-port               nil        "The ERC port to use.")
(defvar me/erc-server             nil        "The ERC server to use.")
(defvar me/font-family            "Courier"  "The font to use.")
(defvar me/font-size-default      110        "The font size to use for default text.")
(defvar me/font-size-header-line  120        "The font size to use for the header-line.")
(defvar me/font-size-mode-line    110        "The font size to use for the mode-line.")
(defvar me/font-size-small        100        "The font size to use for smaller text.")
(defvar me/font-size-title        140        "The font size to use for titles.")

(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

* Organization
#+BEGIN_SRC emacs-lisp

(defun github-line-number ()
  (string-to-number (format-mode-line "%l")))


(defun github-current-branch ()
  (shell-command-to-string "git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,'"))


(defun github-current-file ()
  (shell-command-to-string (concat "git ls-files --full-name " (buffer-name))))


(defun github-url-at-point ()
  (interactive)
  (kill-new
    (concat
      (shell-command-to-string "git remote get-url origin | sed -e 's,git@,,' -e 's,\.git$,,' -e 's,:,\/,'")
      "/tree/"
      (github-current-branch)
      "/"
      (github-current-file)
      "#L"
      (number-to-string (github-line-number)))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after (org)
  :hook
  ((org-mode . evil-org-mode)
   (evil-org-mode . (lambda ()
              (evil-org-set-key-theme)))))
#+END_SRC

* Visuals
Set font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Jetbrains Mono"
                      :height 90
                      :weight 'normal
                      :width 'normal)
#+end_src

Fireplace
#+begin_src emacs-lisp
  (use-package fireplace)
#+end_src
Spaceline (Spacemacs-style modeline)
#+begin_src emacs-lisp
  (use-package spaceline)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (spaceline-emacs-theme)
#+end_src

Set theme to spacemacs-dark
#+begin_src emacs-lisp
  (use-package spacemacs-theme)
  (load-theme 'spacemacs-dark)
#+end_src

Use which-key for command discoverability
#+BEGIN_SRC emacs-lisp
(use-package which-key
   :after evil)
(which-key-mode)
#+END_SRC

Line numbers TODO: am I doing this right?

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
(setq display-line-numbers-width-start t)
#+END_SRC

Ivy for completing all the things
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :defer 0.1
    :diminish
    :bind (("C-c C-r " . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :config (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-style-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+end_src

* Editing

vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC
sudo-edit to,,,, edit things with sudo
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
#+END_SRC
Evil mode for vim vibes

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-search-module 'evil-search
        evil-want-C-u-scroll nil
        evil-want-keybinding nil
        evil-want-C-i-jump nil
        evil-move-cursor-back nil)
  (evil-mode)
  :config
  ;(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
;  (commend (key-chord-define evil-visual-state-map "jk" 'evil-normal-state))
)
#+END_SRC

Use evil-collection for saner evil defaults
#+begin_src emacs-lisp
  (use-package evil-collection
    :after (evil cider))
    (evil-collection-init)
#+end_src

ace-window for jumping between windows
#+begin_src emacs-lisp
  (use-package ace-window
    :after evil)
  (evil-define-key 'normal 'global (kbd "SPC o") 'ace-window)
#+end_src

wgrep for nuclear refactoring https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/
#+begin_src emacs-lisp
  (use-package wgrep)
  (require 'wgrep)
  (evil-set-initial-state 'ivy-occur-grep-mode 'normal)
#+end_src

Basic file/buffer commands

#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "SPC f f") 'find-file)
  (evil-define-key 'normal 'global (kbd "SPC K") 'kill-buffer)
  (evil-define-key 'normal 'global (kbd "SPC f r") 'counsel-recentf)
  (evil-define-key 'normal 'global (kbd "SPC b") 'counsel-switch-buffer)
  (evil-define-key 'normal 'global (kbd "SPC s p") 'counsel-ag)
  (evil-define-key 'normal 'global (kbd "SPC s P") (lambda () (interactive) (counsel-ag nil nil "--clojure")))
  (evil-define-key 'normal 'global (kbd "SPC s s") (lambda () (interactive) (counsel-ag nil default-directory)))
  (evil-define-key 'normal 'global (kbd "SPC SPC") 'counsel-M-x)
  (evil-define-key 'visual 'global (kbd "SPC SPC") 'counsel-M-x)
  (evil-define-key 'insert 'global (kbd "M-/") 'counsel-company)
#+end_src

Edit this file:

#+begin_src emacs-lisp
  (defun edit-dotemacs ()
    (interactive)
    (find-file-other-window
     (concat (file-name-directory user-init-file) "dotemacs.org")))
#+end_src

Recent files:
#+begin_src emacs-lisp
    (recentf-mode 1)
    (setq recentf-max-saved-items "200")
#+end_src

expand-region to make selecting text easier. TODO: this seems to throw evil into a weird state where jk doesn't work every now and then, should fix
#+begin_src emacs-lisp
  (use-package expand-region
    :after evil)

  (defhydra expand-region-hydra
    (:color red :title "Expand region" :body-pre (call-interactively 'er/expand-region))
    ("x" er/expand-region "expand")
    ("z" er/contract-region "contract"))
  (evil-define-key 'normal 'global (kbd "SPC x") 'expand-region-hydra/body)
#+end_src


Key chord mode for the sole purpose of making "jk" work as ESC

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :config
  (key-chord-mode 1))
#+END_SRC

window management hydra
#+begin_src emacs-lisp
  (pretty-hydra-define windows-hydra
    (:title "Windows" :color red :quit-key "q")
    ("Misc"
     (("w" delete-window "close current window")
      ("W" delete-other-windows "close other windows")
      ("b" balance-windows "balance")
      ("o" (lambda () (interactive) (progn (split-window-right) (windmove-right))) "new window" :exit t))
     "Move"
     (("h" evil-window-left "left")
      ("j" evil-window-down "down")
      ("k" evil-window-up "up")
      ("l" evil-window-right "right"))
     "Split"
     (("H" split-window-right "left")
      ("J" (lambda () (interactive) (progn (split-window-below) (windmove-down))) "down")
      ("K" split-window-below "up")
      ("L" (lambda () (interactive) (progn (split-window-right) (windmove-right))) "right"))))

  (evil-define-key 'normal 'global (kbd "SPC w") 'windows-hydra/body)
#+end_src

Company for text completion
#+BEGIN_SRC emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Hydras for grouping related keybindings with a helpful reference guide, either for speed or discoverability reasons

#+begin_src emacs-lisp
  (use-package hydra
    :config
    (defvar hydra-stack nil)
    (defun hydra-push (expr)
      (push `(lambda () ,expr) hydra-stack))

    (defun hydra-pop ()
      (interactive)
      (let ((x (pop hydra-stack)))
        (when x
        (funcall x)))))

  (use-package major-mode-hydra
    :config
    (evil-define-key 'normal 'global (kbd "SPC m") 'major-mode-hydra)
    (evil-define-key 'normal 'global (kbd ",") 'major-mode-hydra)
    (evil-define-key 'visual 'global (kbd "SPC m") 'major-mode-hydra)
    (evil-define-key 'visual 'global (kbd ",") 'major-mode-hydra))
#+end_src

Hydra for configuration

#+begin_src emacs-lisp
  (pretty-hydra-define config-hydra
    (:color blue :title "Configuration" :quit-key "q")
    ("Dotemacs"
     (("e" edit-dotemacs "edit dotemacs")
      ("r" reload-dotemacs "reload dotemacs"))
     "Packages"
     (("p" package-refresh-contents "refresh packages"))
     "QoL"
     (("R" (lambda () (interactive) (progn (font-lock-fontify-buffer) (redraw-display))) "fix visuals"))))

  (evil-define-key 'normal 'global (kbd "SPC c") 'config-hydra/body)
#+end_src

Smartparens to make parens, well, smart.

#+begin_src emacs-lisp
(use-package smartparens
  :after evil
  :hook
  ((clojure-mode lisp-mode lisp-interaction-mode emacs-lisp-mode) . smartparens-strict-mode)
  :config
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-pair "'" nil :actions :rem)
  (sp-pair "`" nil :actions :rem))
#+end_src

evil-cleverparens to make smartparens play nice with evil

#+begin_src emacs-lisp
  (use-package evil-cleverparens
    :after (smartparens evil)
    :config
    (setq evil-move-beyond-eol t))

  (add-hook 'smartparens-mode-hook #'evil-cleverparens-mode)
#+end_src

YaSnippet, not currently used but it's nice to have
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
#+end_src

Zoom hydra TODO: make it work across all buffers and maybe set the default?

#+begin_src emacs-lisp
  (require 'hydra)
  (require 'pretty-hydra)

  (pretty-hydra-define hydra-zoom
    (:color red :quit-key "q")
    ("Zoom"
     (("+" text-scale-increase "in")
      ("-" text-scale-decrease "out"))))

  (evil-define-key 'normal 'global (kbd "SPC z") 'hydra-zoom/body)

#+end_src

magit and magit-evil for efficiently borking my local git repositories
#+begin_src emacs-lisp
  (use-package magit
    :after evil)
  (evil-define-key 'normal 'global (kbd "SPC g s") 'magit-status)
  (evil-define-key 'normal 'global (kbd "SPC g f") 'magit-find-file)
  (evil-define-key 'normal 'global (kbd "SPC g b") 'magit-blame)
  (evil-define-key 'normal 'global (kbd "SPC g l") 'github-url-at-point)

  (use-package evil-magit
    :after magit)

  (require 'evil-magit)
#+end_src

avy for jumping around
#+begin_src emacs-lisp
  (use-package avy)
  (require 'avy)
  (pretty-hydra-define avy-hydra
    (:color blue :title "Jump" :quit-key "q")
    ("Word"
     (("w" evil-avy-goto-word-1 "word (1)")
      ("W" evil-avy-goto-word-0 "word (0)"))
     "Character"
     (("j" evil-avy-goto-char-2 "character (2)")
      ("J" evil-avy-goto-char "character (1)"))
     "Line"
     (("l" evil-avy-goto-line "line")
      ("n" evil-avy-goto-line-below "line (below)")
      ("N" evil-avy-goto-line-above "line (above)"))))

  (evil-define-key 'normal 'global (kbd "SPC j") 'avy-hydra/body)
  (evil-define-key 'visual 'global (kbd "SPC j") 'avy-hydra/body)
  (setq avy-style 'words)
#+end_src

* Languages

Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC

LaTeX

Doesn't really work on my dev laptop, but it's not like I typeset stuff there anyways TODO: fix this
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :config
  (setq preview-gs-command "/usr/bin/gs"))

(use-package latex-preview-pane
  :config
  (latex-preview-pane-enable))

#+END_SRC

Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC
* Includes

All lisps

#+begin_src emacs-lisp
  (org-babel-load-file (expand-file-name "modes/lisp/all-lisp.org" user-emacs-directory))
#+end_src

Org mode

#+begin_src emacs-lisp
  (org-babel-load-file (expand-file-name "modes/org.org" user-emacs-directory))
#+end_src

Amperity


#+begin_src emacs-lisp
(when (file-exists-p (expand-file-name "~/amperity.org"))
  (org-babel-load-file (expand-file-name "~/amperity.org")))
#+end_src
